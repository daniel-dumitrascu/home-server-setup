---

- hosts: all
  become: true

  vars:

    linux_distribution: "Archlinux"
    data_ssd_uuid: "422c7d7f-3236-4de0-aa87-93c2e399c3db"
    ssh_port: "4555"
    user_id: 1000
    group_id: 1001
    system_password: "password"  

    home_root_path: "/home/daniel/"
    data_root_path: "/mnt/usb/"

    home_ssh_keys_path: ".ssh/authorized_keys.pub"
    home_dockers_path: "apps/tools/dockers"
    home_homer_dashboard_path: "apps/tools/homer"

    data_jellyfin_media_path: "multimedia"
    data_qbittorrent_download_path: "downloads/torrents"
    
    vpn_configs_path: "/etc/openvpn/client/configurations"
    vpn_selected_config: "config"

  tasks:

  - name: System update - update full system
    shell: pacman -Syu --noconfirm
    register: system_update_out

  - name: System update - output    
    debug:  
      var: system_update_out

########################################################

  - name: Create data root path
    file:
      path: "{{ data_root_path }}"
      state: directory

########################################################

  - name: Setup fstab - check if the SSD UUID is already added to the fstab
    command:
      cmd: "grep '{{ data_ssd_uuid }}' /etc/fstab"
    register: result
    failed_when: result.rc != 0 and result.rc != 1
    check_mode: false
    changed_when: false

  - name: Setup fstab - add SSD UUID to fstab
    lineinfile:
      path: /etc/fstab
      line: "UUID={{ data_ssd_uuid }} {{ data_root_path }} ext4 defaults,errors=remount-ro 0 2"
    when: result.rc == 1 # UUID wasn't found

  - name: Setup fstab - remount all the partitions from fstab
    command:
      cmd: "mount -a"
    register: fstab_remount_out

  - name: Setup fstab - output    
    debug:  
      var: fstab_remount_out

########################################################

  - name: Dir structure - create dir structure on both data and os SSDs
    file:
      path: "{{ item }}"
      state: directory
    with_items:
      - "{{ home_root_path }}{{ home_dockers_path }}"
      - "{{ home_root_path }}{{ home_homer_dashboard_path }}"
      - "{{ data_root_path }}analiza"
      - "{{ data_root_path }}de_scris"
      - "{{ data_root_path }}{{ data_qbittorrent_download_path }}"
      - "{{ data_root_path }}{{ data_jellyfin_media_path }}/music"
      - "{{ data_root_path }}{{ data_jellyfin_media_path }}/movies"

########################################################

  - name: Packages - install the necessary packages
    package:
      name:
        - vim
        - openssh
        - fail2ban
        - python
        - docker
      state: latest
    register: packages_output
    when: 'ansible_distribution == linux_distribution'

  - name: Packages - output debug 
    debug:
      var: packages_output

########################################################

  - name: SSH - generate keys for ssh machine authentication
    openssh_keypair:
      path: "{{ home_root_path }}.ssh/authorized_keys"
      type: rsa
      size: 2048
      state: present
    register: generate_keys_output

  - name: SSH - key generation output   
    debug:
      var: generate_keys_output

  - name: SSH - change permissions on the .ssh folder
    file:
      path: ~/.ssh
      state: directory
      mode: "0755"

  - name: SSH - disable root SSH login, change the default ssh port (22) and enable public key authentication
    lineinfile:
      path: /etc/ssh/sshd_config
      regexp: "{{ item.regexp }}"
      line: "{{ item.line }}"
    with_items:
      - { regexp: '^#?PermitRootLogin', line: 'PermitRootLogin no' }
      - { regexp: '^#?Port', line: 'Port {{ ssh_port }}' }
      - { regexp: '^#?PubkeyAuthentication', line: 'PubkeyAuthentication yes' }
      - { regexp: '^AuthorizedKeysFile', line: 'AuthorizedKeysFile {{ home_root_path }}{{ home_ssh_keys_path }}' }
      - { regexp: '^#PasswordAuthentication', line: 'PasswordAuthentication no' }

  - name: SSH - start and enable the SSH service
    service:
      name: sshd
      state: started
    notify:
      - enable_and_start_sshd

########################################################

  - name: Fail2Ban - check if fail2ban has a jail.local file
    stat:
      path: /etc/fail2ban/jail.local
    register: fail2ban_jail_stat

  - name: Fail2Ban - create a jail.local for fail2ban
    file:
      path: /etc/fail2ban/jail.local
      state: touch
    when: not fail2ban_jail_stat.stat.exists
    register: fail2ban_jail_creation

  - name: Fail2Ban - add default config to jail.local
    template:
      src: jail.local.template
      dest: /etc/fail2ban/jail.local
    when: fail2ban_jail_creation is defined and fail2ban_jail_creation.changed == true

  - name: Fail2Ban - start and enable the fail2ban service
    service:
      name: fail2ban
      state: started
    notify:
      - enable_and_start_fail2ban

########################################################

  - name: Docker - start and enable docker
    service:
      name: docker
      enabled: yes
      state: started

########################################################

  - name: Jellyfin - pull jellyfin docker image
    docker_image:
      name: jellyfin/jellyfin
      source: pull
      tag: latest

  - name: Jellyfin - create config volume for jellyfin
    docker_volume:
      name: jellyfin-config
      driver: local

  - name: Jellyfin - create cache volume for jellyfin
    docker_volume:
      name: jellyfin-cache
      driver: local

  - name: Jellyfin - start jellyfin docker container
    docker_container:
      name: jellyfin
      image: jellyfin/jellyfin
      state: started
      detach: true
      volumes:
        - jellyfin-config:/config
        - jellyfin-cache:/cache
      mounts:
        - type: bind
          source: "{{ data_root_path }}{{ data_jellyfin_media_path }}"
          target: /media
      user: "{{ user_id }}:{{ group_id }}"
      network_mode: host
      restart_policy: unless-stopped

########################################################

  - name: Qbittorrent - pull qbittorrent docker image
    docker_image:
      name: linuxserver/qbittorrent
      source: pull
      tag: latest

  - name: Qbittorrent - create config volume for qbittorrent
    docker_volume:
      name: qbittorrent-config
      driver: local

  - name: Qbittorrent - start qbittorrent docker container
    docker_container:
      name: qbittorrent
      image: linuxserver/qbittorrent
      state: started
      detach: true
      restart_policy: always
      env:
        PUID: "1000"
        PGID: "1000"
        TZ: "Europe/London"
        UMASK_SET: "022"
        WEBUI_PORT: "8080"
      ports:
        - "6881:6881"
        - "6881:6881/udp"
        - "8080:8080"
        - "45666:45666"
      volumes:
        - qbittorrent-config:/config
        - "{{ data_root_path }}{{ data_qbittorrent_download_path }}:/downloads"

########################################################

  - name: Homer - pull homer docker image
    docker_image:
      name: b4bz/homer
      source: pull
      tag: latest

  - name: Homer - copy homer config
    template:
      src: homer.config.yml
      dest: "{{ home_root_path }}{{ home_homer_dashboard_path }}/config.yml"

  - name: Homer - start homer docker container
    docker_container:
      name: homer
      image: b4bz/homer
      state: started
      detach: true
      restart_policy: always
      ports:
        - "8081:8080"
      volumes:
        - "{{ home_root_path }}{{ home_homer_dashboard_path }}:/www/assets"

########################################################

  - name: Surfshark vpn - download OpenVPN configurations from surfshark
    get_url:
      url: "https://my.surfshark.com/vpn/api/v1/server/configurations"
      dest: "/etc/openvpn/client"

  - name: Surfshark vpn - create dir for surfshark configurations
    file:
      path: "/etc/openvpn/client/configurations"
      state: directory

  - name: Surfshark vpn - unzip the surfshark configurations archive
    unarchive:
      src: "/etc/openvpn/client/Surfshark_Config.zip"
      dest: "/etc/openvpn/client/configurations"

  - name: Surfshark vpn - create the login.conf file for surfshark
    template:
      src: login.conf
      dest: /etc/openvpn/client/login.conf

  - name: Surfshark vpn - get all surfshark configurations
    find:
      paths: "/etc/openvpn/client/configurations"
      recurse: yes
      patterns: '*'
    register: found_files

  - name: Surfshark vpn - decorate surfshark configurations
    lineinfile:
      path: "{{ item.path }}"
      regexp: '^auth-user-pass'
      line: "auth-user-pass /etc/openvpn/client/login.conf"
    with_items: "{{ found_files.files }}"

  - name: Surfshark vpn - download vpn ignition script
    get_url:
      url: "https://raw.githubusercontent.com/daniel-dumitrascu/vpn-ignition-script/main/surfshark-startvpn.py"
      dest: /usr/local/bin/surfshark-startvpn.py
    register: result

  - name: Surfshark vpn - create openvpn service file
    template:
      src: openvpn.service
      dest: /etc/systemd/system/openvpn.service

  - name: Surfshark vpn - add executable line with parameters to openvpn.service
    lineinfile:
      path: /etc/systemd/system/openvpn.service
      regexp: '^ExecStart'
      line: "ExecStart=/usr/bin/python3 /usr/local/bin/surfshark-startvpn.py {{ system_password }} {{ vpn_configs_path }} {{ vpn_selected_config }}"
    notify:
      - enable_and_start_openvpn

########################################################

  handlers:
    - name: enable_and_start_sshd
      service:
        name: sshd
        enabled: yes
        state: started

    - name: enable_and_start_fail2ban
      service:
        name: fail2ban
        enabled: yes
        state: started

    - name: enable_and_start_openvpn
      service:
        name: openvpn
        enabled: yes
        state: started

